<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr yang</title>
  <subtitle>Mr yang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-13T07:59:02.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工作日志-面向对象编程</title>
    <link href="http://yoursite.com/2017/04/13/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97-14%E5%A4%A9/"/>
    <id>http://yoursite.com/2017/04/13/工作日志-14天/</id>
    <published>2017-04-13T07:59:33.184Z</published>
    <updated>2017-04-13T07:59:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-搜索连动事件"><a href="#1-搜索连动事件" class="headerlink" title="1.搜索连动事件"></a>1.搜索连动事件</h2><h2 id="2-页面显示动作"><a href="#2-页面显示动作" class="headerlink" title="2.页面显示动作"></a>2.页面显示动作</h2><h2 id="3-没有数据返回需要一个空的无数据页面"><a href="#3-没有数据返回需要一个空的无数据页面" class="headerlink" title="3.没有数据返回需要一个空的无数据页面"></a>3.没有数据返回需要一个空的无数据页面</h2><h2 id="4-事件触发，动态生成的元素绑定数据使用模板，在template中传入相应得到函数"><a href="#4-事件触发，动态生成的元素绑定数据使用模板，在template中传入相应得到函数" class="headerlink" title="4.事件触发，动态生成的元素绑定数据使用模板，在template中传入相应得到函数"></a>4.事件触发，动态生成的元素绑定数据使用模板，在template中传入相应得到函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var config = &#123;</div><div class="line">    userId:&apos;.../&apos;</div><div class="line">    show:function() &#123;</div><div class="line">        //这里添加方法</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><p>如何解决移动端input输入值触发 拼音键入事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var cpLock = true;</div><div class="line">input.addEventListener(&apos;input&apos;,function()&#123;</div><div class="line">    //监听input的输入事件</div><div class="line">    if(cpLock)&#123;</div><div class="line">        //执行函数</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">document.addEventListener(&apos;compositiononstart&apos;,function()&#123;</div><div class="line">    //开启中文</div><div class="line">    cpLock = false;</div><div class="line">&#125;)</div><div class="line">document.addEventListener(&apos;compositiononend&apos;,function()&#123;</div><div class="line">    cpLock = true; </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>IScroll的移动问题</p>
</li>
</ul>
<ol>
<li>首先 iscroll有很多版本 普通版 prop版  无限版。。。</li>
<li>new IScroll(‘.querySelector’)</li>
<li><p>固定样式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">div class = &apos;wrapper&apos;</div><div class="line">    div id = &apos;scroll&apos;</div><div class="line">        ul </div><div class="line">---&gt;   这是滑动得到元素  li</div></pre></td></tr></table></figure>
</li>
<li><p>滑动原理</p>
</li>
</ol>
<ul>
<li>id = scroll  的高度需要超过 wrapper的高度才能滑动其中的元素  要不然不能滑动</li>
</ul>
<ol>
<li>只用prop版的IScroll才能监听到‘onscroll’事件</li>
<li>它会计算  id = scroll中每一的高度 来生成 maxScrollY   赋值给id 中的translateY</li>
<li>IScroll中的new出的对象的方法</li>
</ol>
<ul>
<li>myScroll.scrollTo(x,y,time,easzing);</li>
<li>myScroll.slideDown</li>
<li>myScroll.refresh()  –&gt;在动态生成的元素加入到内部后  需要刷新已重新计算滑动高度<h3 id="让一个元素居中"><a href="#让一个元素居中" class="headerlink" title="让一个元素居中"></a>让一个元素居中</h3></li>
<li>flex布局<ul>
<li>display:flex;justify-content:center; align-items:center;</li>
</ul>
</li>
</ul>
<h3 id="页面写法"><a href="#页面写法" class="headerlink" title="页面写法"></a>页面写法</h3><ul>
<li>一般先写一个function init() {}<ol>
<li>先初始化头部配置  这是遗留问题  目前 需要减去 44px;</li>
<li>初始化内容高度app-content  overflow-hidden 使他能在一页中显示</li>
<li>如果需要内容滑动的  直接在这里初始化iscroll中 滑动模块的高度.wrapper的高度</li>
<li>页面中其他元素以对象形式出现的需要重置</li>
<li>需要拿userInfo 拼接图片  另外getObjectFromSessition是异步的  需要一个回调函数<br>getUserinfo(function(){<ol>
<li>一般这里执行  loading()<br>})</li>
</ol>
</li>
</ol>
</li>
</ul>
<p>//初始化页面<br>init();</p>
<h3 id="input输入框获取焦点问题"><a href="#input输入框获取焦点问题" class="headerlink" title="input输入框获取焦点问题"></a>input输入框获取焦点问题</h3><ul>
<li>div  包裹一个input标签 里面一个delete标签  </li>
<li>点击delete标签时 input.val(‘’)  置空  input.focus()  –&gt;会有问题</li>
<li>当点击div时会触发 input的focus()很bug<h3 id="iscroll-如果每次生成生成列表的时候-new-IScroll-iscroll的click事件为true-生成的click事件会叠加-在下次执行的时候多次执行"><a href="#iscroll-如果每次生成生成列表的时候-new-IScroll-iscroll的click事件为true-生成的click事件会叠加-在下次执行的时候多次执行" class="headerlink" title="iscroll  如果每次生成生成列表的时候  new IScroll iscroll的click事件为true  生成的click事件会叠加  在下次执行的时候多次执行"></a>iscroll  如果每次生成生成列表的时候  new IScroll iscroll的click事件为true  生成的click事件会叠加  在下次执行的时候多次执行</h3></li>
</ul>
<h3 id="以面向对象的形式写网页"><a href="#以面向对象的形式写网页" class="headerlink" title="以面向对象的形式写网页"></a>以面向对象的形式写网页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">var config = &#123;</div><div class="line">    page:1,</div><div class="line">    node:$(&apos;.content&apos;),</div><div class="line">    mask:$(&apos;.mask&apos;),</div><div class="line">    _isShow:false,</div><div class="line">    data:&#123;</div><div class="line">        &quot;0001&quot;:&quot;最新发布&quot;,</div><div class="line">        &quot;0005&quot;:&quot;车龄最短&quot;</div><div class="line">    &#125;,</div><div class="line">    get isShow() &#123;</div><div class="line">        return this._isShow;</div><div class="line">    &#125;,</div><div class="line">    set isShow(val) &#123;</div><div class="line">        this._isShow = val; </div><div class="line">    &#125;,</div><div class="line">    listen:&#123;&#125;,</div><div class="line">    //利用对象监听  同一函数触发时的多个操作</div><div class="line">    addEvent:function(type,fn) &#123;</div><div class="line">        if(typeof this.listen[type] == &apos;function&apos; &amp;&amp; Array.isArray(this.listen[type]))  &#123;</div><div class="line">             this.listen[type].push(fn);</div><div class="line">        &#125;else &#123;</div><div class="line">            this.listen[type] = [];</div><div class="line">            this.listen[type].push(fn);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    fireE:functon(type)&#123;</div><div class="line">        if(typeof this.listen[type] == &apos;function&apos; &amp;&amp; Array.isArray(this.listen[type]))  &#123;</div><div class="line">             for(var i =0;i&lt;this.listen[type].length;i++) &#123;</div><div class="line">                 this.listen[type][i]();</div><div class="line">             &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    removeE:function(type,fn) &#123;</div><div class="line">        if(typeof this.listen[type]) &#123;</div><div class="line">            //循环type中 所有事件 删除原来的</div><div class="line">            for(var i = 0 ;i &lt; this.listen[type].length;i++) &#123;</div><div class="line">                if(this.listen[type][i] === fn) &#123;</div><div class="line">                    this.listen[type].splice(i,1);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //加入一些dom操作方法</div><div class="line">    showDelet:function() &#123;</div><div class="line">        //显示删除按钮</div><div class="line">    &#125;</div><div class="line">    refresh:function(data) &#123;</div><div class="line">        this.data = [];</div><div class="line">        this.page = 1 ;</div><div class="line">        this.node.html(&apos;&apos;);</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    //定义模版</div><div class="line">    pushHtml:function() &#123;</div><div class="line">        var page = this.page;</div><div class="line">        var template = _.template(this.temp.html(),&#123;data:data,page:page,token:token,userId:userId&#125;)</div><div class="line">    &#125;,</div><div class="line">    //动态生成的元素再追加事件</div><div class="line">    setNode:function() &#123;</div><div class="line">        this.node.html(val);</div><div class="line">        this.addListen(this.page)</div><div class="line">    &#125;,</div><div class="line">    addListen:function(page) &#123;</div><div class="line">        $(&apos;[page=page&apos;+page+&apos;]&apos;).off(&apos;click).on(&apos;click&apos;,function()&#123;</div><div class="line">            var id = $(this).data(&apos;id&apos;);</div><div class="line">        &#125;)</div><div class="line">        myScroll.refresh();</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">var orderByList = &#123;</div><div class="line">    list:$(&apos;.header&apos;),</div><div class="line">    mask:$(&apos;.mask&apos;),</div><div class="line">    select:$(&apos;.select&apos;),</div><div class="line">    showSelect:function() &#123;</div><div class="line">        this.list.hide();</div><div class="line">        this.list.mask();</div><div class="line">        this.select.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//封装方法</div><div class="line">function loadData(putData,cb,caller) &#123;</div><div class="line">    AladdingTools.request(&apos;post&apos;,AppInter..,putData,function(data)&#123;</div><div class="line">        if(data==&apos;001&apos;) &#123;</div><div class="line">            typeof cb === &apos;functionn&apos; &amp;&amp; cb();</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">function getSessionData(cb,called) &#123;</div><div class="line">    AladdinTools.getObjectFromSession(config.searchKey,function(data)&#123;</div><div class="line">        cb&amp;&amp;typeof cb === &apos;function&apos;&amp;&amp; cb.call(called,data);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">function bindEvent() &#123;</div><div class="line">    1.  设置左箭头返回键</div><div class="line">    2.  设置右箭头返回键</div><div class="line">    3.  其他</div><div class="line">&#125;</div><div class="line">function load() &#123;</div><div class="line">    myscroll的一些设置</div><div class="line">&#125;</div><div class="line">function init() &#123;</div><div class="line">    //定义页面高度</div><div class="line">    pageHeight = document.body.clientHeight - 44 ;</div><div class="line">    $(&apos;.app-content&apos;).height(pageHeight);</div><div class="line">    $(&apos;.iscroll-content&apos;).height(pageHeight - 50);</div><div class="line">    getUserInfo(function()&#123;</div><div class="line">        load(funtion()&#123;</div><div class="line">            bindEvent;</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">//get 和 set 的用法</div><div class="line">get --&gt; config.isShow; --&gt;false;</div><div class="line">set --&gt; config.isShow = true;</div><div class="line">调用  config.isShow  --&gt;true;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-搜索连动事件&quot;&gt;&lt;a href=&quot;#1-搜索连动事件&quot; class=&quot;headerlink&quot; title=&quot;1.搜索连动事件&quot;&gt;&lt;/a&gt;1.搜索连动事件&lt;/h2&gt;&lt;h2 id=&quot;2-页面显示动作&quot;&gt;&lt;a href=&quot;#2-页面显示动作&quot; class=&quot;headerlink&quot; title=&quot;2.页面显示动作&quot;&gt;&lt;/a&gt;2.页面显示动作&lt;/h2&gt;&lt;h2 id=&quot;3-没有数据返回需要一个空的无数据页面&quot;&gt;&lt;a href=&quot;#3-没有数据返回需要一个空的无数据页面&quot; class=&quot;headerlink&quot; title=&quot;3.没有数据返回需要一个空的无数据页面&quot;&gt;&lt;/a&gt;3.没有数据返回需要一个空的无数据页面&lt;/h2&gt;&lt;h2 id=&quot;4-事件触发，动态生成的元素绑定数据使用模板，在template中传入相应得到函数&quot;&gt;&lt;a href=&quot;#4-事件触发，动态生成的元素绑定数据使用模板，在template中传入相应得到函数&quot; class=&quot;headerlink&quot; title=&quot;4.事件触发，动态生成的元素绑定数据使用模板，在template中传入相应得到函数&quot;&gt;&lt;/a&gt;4.事件触发，动态生成的元素绑定数据使用模板，在template中传入相应得到函数&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var config = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    userId:&amp;apos;.../&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    show:function() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //这里添加方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="http://yoursite.com/2017/03/31/mianshi/"/>
    <id>http://yoursite.com/2017/03/31/mianshi/</id>
    <published>2017-03-31T14:47:18.895Z</published>
    <updated>2017-04-13T08:06:26.888Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2017年3月面试题"><a href="#2017年3月面试题" class="headerlink" title="2017年3月面试题"></a>2017年3月面试题</h3><ol>
<li>0.1 + 0.2 = 0.300000000000000004</li>
<li>var let const之间的的区别</li>
<li>flex布局</li>
<li>ajax请求</li>
<li>32432.34234&gt;&gt;0  省去小数点之后的</li>
<li>343.324.fixTo(2)  –&gt;保留两位小数</li>
<li>flex 布局 开启flex  子元素flex：1；快速设置</li>
<li>setTimeout  异步操作</li>
<li>对象键的唯一性;</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2017年3月面试题&quot;&gt;&lt;a href=&quot;#2017年3月面试题&quot; class=&quot;headerlink&quot; title=&quot;2017年3月面试题&quot;&gt;&lt;/a&gt;2017年3月面试题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;0.1 + 0.2 = 0.300000000000000004
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://yoursite.com/2017/03/29/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2017/03/29/flex布局/</id>
    <published>2017-03-29T14:45:43.222Z</published>
    <updated>2017-03-29T14:46:40.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="felx布局"><a href="#felx布局" class="headerlink" title="felx布局"></a>felx布局</h2><ul>
<li>flex布局是用来瓜分剩余宽度的<ul>
<li>用它来替代之前的div table 和float 等布局</li>
<li>更加的强大</li>
</ul>
</li>
<li>存在兼容问题：<ul>
<li>IE10以下是不支持的</li>
<li>Android4，1/4.2/4.3存在问题 苹果safari7存在问题</li>
<li>Webkit内核的浏览器，必须加上-webkit前缀<a id="more"></a>
<h3 id="如何瓜分剩余宽度"><a href="#如何瓜分剩余宽度" class="headerlink" title="如何瓜分剩余宽度"></a>如何瓜分剩余宽度</h3></li>
</ul>
</li>
<li>首先剩余宽度是怎么算出来的？<br>剩余宽度 = 父元素宽度 - 子元素宽度</li>
<li>如何分配这个剩余宽度？<ol>
<li>父元素开启display:flex;<ul>
<li>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）</li>
</ul>
</li>
<li>子元素的分配规则：<br>用flex 0/1/2/3占的份数<h3 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h3></li>
</ol>
</li>
</ul>
<ol>
<li><p>顶部head（头部）  –&gt;相当于两栏布局</p>
<ul>
<li>&lt;      这是头部标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;header&gt;</div><div class="line"> &lt;a&gt; &lt; &lt;/a&gt;</div><div class="line"> &lt;h1&gt;这是一个头部title&lt;/h1&gt;</div><div class="line">&lt;/header&gt;</div><div class="line">&lt;!--css标签--&gt;</div><div class="line">header &#123;</div><div class="line">    display:flex;</div><div class="line">&#125;</div><div class="line">header h1&#123;</div><div class="line">    flex:1;     ----&gt;让h1占完剩余宽度</div><div class="line">&#125;</div><div class="line">效果：左边的a标签随内容改变大小；右边的title内容相当于占完剩余的空间</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>导航nav</p>
</li>
</ol>
<ul>
<li>导航1   导航2   导航3   导航4<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;导航1&lt;/li&gt;</div><div class="line">    &lt;li&gt;导航2&lt;/li&gt;</div><div class="line">    &lt;li&gt;导航3&lt;/li&gt;</div><div class="line">    &lt;li&gt;导航4&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">//css样式</div><div class="line">ul &#123;</div><div class="line">    display:flex;</div><div class="line">    justify-content:space-around;---&gt;两边留有余地</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>主轴：justify-cotent:<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png" alt="justify-content"></li>
<li>交叉轴：align-items<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png" alt="align-items"></li>
</ul>
<ol>
<li><p>元素居中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;div&gt;让这个元素居中&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">//css</div><div class="line">父元素 &#123;</div><div class="line">    display:flex;</div><div class="line">    justify-content:center;</div><div class="line">    align-items:center;</div><div class="line">&#125;</div><div class="line">内部元素的居中</div></pre></td></tr></table></figure>
</li>
<li><p>轮播图flex-shrink</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li&gt;1&lt;/li&gt;</div><div class="line">        &lt;li&gt;2&lt;/li&gt;</div><div class="line">        &lt;li&gt;3&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;div&gt;</div><div class="line">//css</div><div class="line">ul&#123;</div><div class="line">    display:flex;  --&gt; li按行排列</div><div class="line">&#125;</div><div class="line">ul li &#123;</div><div class="line">    flex-shrink:0;   ---&gt;规定ul下面的li不进行收缩还是占一整行</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注意点：flex 开启了BFC</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;felx布局&quot;&gt;&lt;a href=&quot;#felx布局&quot; class=&quot;headerlink&quot; title=&quot;felx布局&quot;&gt;&lt;/a&gt;felx布局&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;flex布局是用来瓜分剩余宽度的&lt;ul&gt;
&lt;li&gt;用它来替代之前的div table 和float 等布局&lt;/li&gt;
&lt;li&gt;更加的强大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存在兼容问题：&lt;ul&gt;
&lt;li&gt;IE10以下是不支持的&lt;/li&gt;
&lt;li&gt;Android4，1/4.2/4.3存在问题 苹果safari7存在问题&lt;/li&gt;
&lt;li&gt;Webkit内核的浏览器，必须加上-webkit前缀
    
    </summary>
    
      <category term="flex" scheme="http://yoursite.com/categories/flex/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>模板引擎的使用</title>
    <link href="http://yoursite.com/2017/03/07/handlebars/"/>
    <id>http://yoursite.com/2017/03/07/handlebars/</id>
    <published>2017-03-07T12:49:41.211Z</published>
    <updated>2017-03-07T13:13:12.814Z</updated>
    
    <content type="html"><![CDATA[<h3 id="现在主要的模板引擎"><a href="#现在主要的模板引擎" class="headerlink" title="现在主要的模板引擎"></a>现在主要的模板引擎</h3><ul>
<li>handlebars</li>
<li>template</li>
<li>ejs —&gt; nodejs<h3 id="首先是handlebars"><a href="#首先是handlebars" class="headerlink" title="首先是handlebars"></a>首先是handlebars</h3></li>
<li>这里就是简单的介绍下如何使用<a id="more"></a></li>
</ul>
<ol>
<li><p>在项目中引入库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src = &apos;./路径/handlebars.js&apos;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在页面中搞一个 模板  用来拼接成模板字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script id=&quot;tpl&quot; type=&quot;text/x-handlebars-template&quot;&gt;</div><div class="line">    &lt;div class=&quot;demo&quot;&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>这里的id是为了查找</li>
<li>type属性不能更改，一定得是text/x-handlebars-template</li>
</ul>
<ol>
<li><p>页面中进行渲染操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var source = document.getElementById(&apos;#tpl&apos;).innerHTML;</div><div class="line">//如果有jquery直接使用jquery来操作</div><div class="line">    var tpl   =  $(&quot;#tpl&quot;).html();</div><div class="line">//预编译模板</div><div class="line">    var template = Handlebars.compile(source);</div><div class="line">//模拟json数据</div><div class="line">    var context = &#123; name: &quot;zhaoshuai&quot;, content: &quot;learn Handlebars&quot;&#125;;</div><div class="line">//匹配json内容</div><div class="line">    var html = template(context);</div><div class="line">//输入模板</div><div class="line">    $(body).html(html);</div></pre></td></tr></table></figure>
</li>
<li><p>这样数据就会渲染到页面上了</p>
<h3 id="数据按规则渲染"><a href="#数据按规则渲染" class="headerlink" title="数据按规则渲染"></a>数据按规则渲染</h3></li>
</ol>
<ul>
<li>一般是为了循环所以才使用模板引擎  这里有几个简单的方式</li>
</ul>
<ol>
<li><p>渲染数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//数据为  必须是一个对象</div><div class="line">对象的内容为数组</div><div class="line">var context = &#123;list:[1,2,3,4,5]&#125;</div><div class="line">到页面中如何渲染---&gt;</div><div class="line">    &lt;script id=&quot;tpl&quot; type=&quot;text/x-handlebars-template&quot;&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &#123;&#123;#each list&#125;&#125;</div><div class="line">                &lt;li&gt;&#123;&#123;this&#125;&#125;&lt;/li&gt;  --&gt;用this来指向当前数组的每一元素</div><div class="line">            &#123;&#123;/each&#125;&#125;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>渲染对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//数据为  必须是一个对象</div><div class="line">对象的内容为数组对象</div><div class="line">var context = &#123;list:[&#123;name:&apos;xio&apos;,age:18&#125;,&#123;name:&apos;xio&apos;,age:18&#125;]&#125;</div><div class="line">到页面中如何渲染---&gt;</div><div class="line">    &lt;script id=&quot;tpl&quot; type=&quot;text/x-handlebars-template&quot;&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &#123;&#123;#list&#125;&#125;</div><div class="line">                &lt;li&gt;&#123;&#123;name&#125;&#125;&lt;/li&gt;&lt;li&gt;&#123;&#123;age&#125;&#125;&lt;/li&gt;  --&gt;用this来指向当前数组的每一元素</div><div class="line">            &#123;&#123;/each&#125;&#125;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>有条件的进行渲染 –&gt;常用在大小图片的渲染上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//数据为  必须是一个对象</div><div class="line">对象的内容为有条件的</div><div class="line">var context = &#123;image:[&#123;src:&apos;xiaotu&apos;,url:&apos;datu&apos;&#125;,&#123;src:&apos;xiaotu&apos;,url:&apos;datu&apos;&#125;],isMobile:true&#125;;</div><div class="line">&lt;script id=&quot;tpl&quot; type=&quot;text/x-handlebars-template&quot;&gt;</div><div class="line">    //一种是小图片</div><div class="line">    &#123;&#123;#if isMobile&#125;&#125;</div><div class="line">        &#123;&#123;#image&#125;&#125;</div><div class="line">            &lt;img src=&apos;&#123;&#123;src&#125;&#125;&apos;&gt;</div><div class="line">        &#123;&#123;/image&#125;&#125;</div><div class="line">    //一种是大图片</div><div class="line">    &#123;&#123;else&#125;&#125;</div><div class="line">        &#123;&#123;#image&#125;&#125;</div><div class="line">            &lt;div style=&quot;background =&#123;&#123;url&#125;&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">        &#123;&#123;/image&#125;&#125;</div><div class="line">    &#123;&#123;/if&#125;&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="art-template-用法几乎一样"><a href="#art-template-用法几乎一样" class="headerlink" title="art-template  用法几乎一样"></a>art-template  用法几乎一样</h3><ul>
<li>不同点</li>
</ul>
<ol>
<li><p>模板script 的标签为 type=text/html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script id=&apos;tpl&apos; type=&apos;text/html&apos;&gt;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在渲染时只需要插入id值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">data = &#123;list:[1,3,4,5]&#125;</div><div class="line">var html = template(&apos;tpl&apos;,data);</div><div class="line">//使用jquery的情况</div><div class="line">$(&apos;.demo).html(html);</div></pre></td></tr></table></figure>
</li>
<li><p>渲染时 each list as value i  可使用if判断和handlebars用法一样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script id=&apos;tpl&apos; type=&apos;text/html&apos;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &#123;&#123;each list as value i&#125;&#125;</div><div class="line">            &#123;&#123;if isM&#125;&#125;</div><div class="line">                &lt;li&gt;&#123;&#123;value&#125;&#125;&lt;/li&gt;</div><div class="line">                &#123;&#123;else&#125;&#125;</div><div class="line">                &lt;li&gt;&#123;&#123;i&#125;&#125;&lt;li&gt;</div><div class="line">            &#123;&#123;/if&#125;&#125;</div><div class="line">        &#123;&#123;/each&#125;&#125;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="ejs是nodejs在使用expess框架是使用的模板引擎"><a href="#ejs是nodejs在使用expess框架是使用的模板引擎" class="headerlink" title="ejs是nodejs在使用expess框架是使用的模板引擎"></a>ejs是nodejs在使用expess框架是使用的模板引擎</h3><ul>
<li>使用时引入 用set<ul>
<li>app.set(‘view engine’,’ejs’);</li>
</ul>
</li>
<li>html模板需保存在当前文件下  views中  并且后缀需要改成ejs;</li>
<li>语法使用原始的语法来进行处理数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var data = &#123;list:[1,3,34,5]&#125;;</div><div class="line">//在express框架中</div><div class="line">express.render(&apos;index&apos;,data)  ---&gt;默认的文件夹views下   index.ejs</div><div class="line"></div><div class="line">//模板中的数据</div><div class="line"></div><div class="line">&lt;% for(var i = 0;i &lt; list.length;i++) &#123; %&gt;</div><div class="line">    &lt;li&gt;&lt;%= list[i] %&gt;&lt;li&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h4><p><a href="http://www.ghostchina.com/introducing-the-handlebars-js-templating-engine/" target="_blank" rel="external">请查看网址handlebars</a></p>
<p><a href="https://github.com/aui/artTemplate" target="_blank" rel="external">art-template</a></p>
<p><a href="http://www.embeddedjs.com/" target="_blank" rel="external">ejs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;现在主要的模板引擎&quot;&gt;&lt;a href=&quot;#现在主要的模板引擎&quot; class=&quot;headerlink&quot; title=&quot;现在主要的模板引擎&quot;&gt;&lt;/a&gt;现在主要的模板引擎&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;handlebars&lt;/li&gt;
&lt;li&gt;template&lt;/li&gt;
&lt;li&gt;ejs —&amp;gt; nodejs&lt;h3 id=&quot;首先是handlebars&quot;&gt;&lt;a href=&quot;#首先是handlebars&quot; class=&quot;headerlink&quot; title=&quot;首先是handlebars&quot;&gt;&lt;/a&gt;首先是handlebars&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;这里就是简单的介绍下如何使用
    
    </summary>
    
      <category term="模板" scheme="http://yoursite.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql基本指令</title>
    <link href="http://yoursite.com/2017/03/07/mysql/"/>
    <id>http://yoursite.com/2017/03/07/mysql/</id>
    <published>2017-03-07T02:05:37.460Z</published>
    <updated>2017-03-07T13:00:46.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DataBase System = 数据库管理系统（DBMS，DataBase Management System) + 数据库(DataBase) + 管理员</div><div class="line">DBS = DBMS + DB</div><div class="line">定义：对大量信息进行管理的高效解决方案，按照数据结构来组织、存储和管理数据的库</div><div class="line">关系型数据库系统</div><div class="line">建立在关系模型上的数据库系统。</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><p>前端能知道的知识</p>
<ul>
<li>这里就只是讲了一下和mysql的的接口</li>
</ul>
</li>
<li><p>如何在node搭建的服务器，请求mysql的API</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var mysql = require(&apos;mysql&apos;);</div><div class="line">var connetion = mysql.createConnection(&#123;</div><div class="line">    host:&apos;localhost&apos;,    ---&gt; 地址ip</div><div class="line">    user:&apos;root&apos;,         ---&gt; 用户名</div><div class="line">    password:&apos;&apos;,</div><div class="line">    database:&apos;itcast&apos;     ---&gt; 数据库具体的条目</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>数据增删改查</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">connection.query(&apos;指令&apos;,function(err,result,files)&#123;</div><div class="line">    //  ---&gt; 指令最好用ES6中  ``来包裹  其中的变量 --&gt; &quot;$&#123; 变量 &#125;&quot;</div><div class="line">    if(err) throw err;</div><div class="line">    result  ---&gt; 结果</div><div class="line">    files   ---&gt; 数据库信息</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 查</div><div class="line">select * from &apos;名字&apos;;</div><div class="line"></div><div class="line">//改</div><div class="line">update &apos;名字&apos; set name = &apos;&apos;,content=&apos;&apos; where id = 1;</div><div class="line"></div><div class="line">//增</div><div class="line">insert into &apos;名字&apos;(name,content) values(&apos;name&apos;,&apos;content&apos;);</div><div class="line"></div><div class="line">//删</div><div class="line">delete from &apos;名字&apos; where id = 9;</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/461255824/node-crawler" target="_blank" rel="external">github练习</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mysql&quot;&gt;&lt;a href=&quot;#mysql&quot; class=&quot;headerlink&quot; title=&quot;mysql&quot;&gt;&lt;/a&gt;mysql&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;DataBase System = 数据库管理系统（DBMS，DataBase Management System) + 数据库(DataBase) + 管理员&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DBS = DBMS + DB&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;定义：对大量信息进行管理的高效解决方案，按照数据结构来组织、存储和管理数据的库&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;关系型数据库系统&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;建立在关系模型上的数据库系统。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>nodejs写爬虫</title>
    <link href="http://yoursite.com/2017/03/04/spider/"/>
    <id>http://yoursite.com/2017/03/04/spider/</id>
    <published>2017-03-04T12:06:23.439Z</published>
    <updated>2017-03-04T12:06:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nodejs写爬虫"><a href="#nodejs写爬虫" class="headerlink" title="nodejs写爬虫"></a>nodejs写爬虫</h3><ul>
<li>首先声明这里写的爬虫很简单  基本上只能爬静态页面  算是最最基本的爬虫</li>
<li>如果要深入研究爬虫 —&gt;  要解决网页异步请求的问题</li>
<li>或许phython能更好的用于编写爬虫<a id="more"></a>
<h3 id="下面就来写吧"><a href="#下面就来写吧" class="headerlink" title="下面就来写吧"></a>下面就来写吧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//先安装需要的依赖包</div><div class="line">npm init -y</div><div class="line">npm init express request cheerio --save</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;);</div><div class="line">var request = require(&apos;request&apos;);</div><div class="line">var cheerio = require(&apos;cheerio&apos;);</div><div class="line">var app = express();</div></pre></td></tr></table></figure>
<ul>
<li>开始</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">app.get(&apos;/&apos;,function(req,res)&#123;</div><div class="line">    request(&apos;url&apos;,function(err,response,body)&#123;</div><div class="line">    body ----&gt;这里的body就是请求回来的字符串页面源码</div><div class="line">    var $ = cheerio(body)    ---&gt;cheerio 可以把body转为dom  由$ 相当于jquery去操作</div><div class="line"></div><div class="line">    res.send($(&apos;img&apos;).attr(&quot;src&quot;))       ----&gt; 可以是 img图片</div><div class="line">    res.json(&#123;img:$(&apos;img&apos;)&#125;)  ---&gt;  json数据</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line">app.listen(3000,function()&#123;</div><div class="line">    console.log(&apos;开启服务&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;nodejs写爬虫&quot;&gt;&lt;a href=&quot;#nodejs写爬虫&quot; class=&quot;headerlink&quot; title=&quot;nodejs写爬虫&quot;&gt;&lt;/a&gt;nodejs写爬虫&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先声明这里写的爬虫很简单  基本上只能爬静态页面  算是最最基本的爬虫&lt;/li&gt;
&lt;li&gt;如果要深入研究爬虫 —&amp;gt;  要解决网页异步请求的问题&lt;/li&gt;
&lt;li&gt;或许phython能更好的用于编写爬虫
    
    </summary>
    
      <category term="nodejs" scheme="http://yoursite.com/categories/nodejs/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>stream和net核心模块</title>
    <link href="http://yoursite.com/2017/02/28/stream%E5%92%8Cnet%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2017/02/28/stream和net模块/</id>
    <published>2017-02-28T15:00:59.865Z</published>
    <updated>2017-02-28T14:59:59.052Z</updated>
    
    <content type="html"><![CDATA[<h3 id="stream流"><a href="#stream流" class="headerlink" title="stream流"></a>stream流</h3><ul>
<li>node可以用fs模块readFile和writeFile来完成读取和输出的任务</li>
<li>但是不能操作大文件</li>
<li>所以有了stream流来操作大文件</li>
</ul>
<ol>
<li>需要引入核心模块fs<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var fs = require(&apos;fs&apos;);</div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>创建读取和输出的路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var path = require(&apos;path&apos;);</div><div class="line">var src = path.join(__dirname,&apos;a.mp4&apos;);</div><div class="line">var dist = path.join(__dirname,&apos;b.mp4&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>生成读取和写入的路径或目标文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var rs = fs.createReadStream(src);</div><div class="line">var ws = fs.createWriteStream(dist); ----&gt;在这里文件就会被创建出来</div></pre></td></tr></table></figure>
</li>
<li><p>利用pipe快速流</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rs.pipe(ws);</div></pre></td></tr></table></figure>
</li>
<li><p>另一种是慢慢读rs中的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var arr = [];</div><div class="line">rs.on(&apos;data&apos;,function(chunk)&#123;</div><div class="line">    //这里读出来的chunk是二进制数据</div><div class="line">    arr.push(chunk);</div><div class="line">&#125;)</div><div class="line">rs.on(&apos;end&apos;,function()&#123;</div><div class="line">    //调用Buffer的concat()  ---&gt;把二进制合成一个concat</div><div class="line">    ws.write(Buffer.concat(arr));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>可以在读之前得到文件的大小  来计算进程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var totalsize = fs.statSync(src).size;</div><div class="line">//在文件读取中计算已度的长度</div><div class="line">var cursize = 0;</div><div class="line">rs.on(&apos;data&apos;,function(chunk)&#123;</div><div class="line">    cursize += chunk.length;</div><div class="line">    //进度值 就是  当前/总的  * 100  toFixed(2)  保留两位</div><div class="line">    console.log((cursize/totalsize*100).toFixed(2)+%)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="net模块实现聊天室"><a href="#net模块实现聊天室" class="headerlink" title="net模块实现聊天室"></a>net模块实现聊天室</h3><ul>
<li>首先是tpc协议  双工模式<br>++  就是服务器和客户端能相互对话</li>
</ul>
<ol>
<li><p>首页引入net模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var net = require(&apos;net&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>创建服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var server = net.createServer();</div></pre></td></tr></table></figure>
</li>
<li><p>监视网络连接情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server.on(&apos;connection&apos;,function(socket)&#123;</div><div class="line">    //这里socket就是连接 服务器和客户端的 对象    ————————&gt;就像网线一样</div><div class="line"></div><div class="line">    1.  监视服务端的输入事件</div><div class="line">    socket.on(&apos;data&apos;,function(data)&#123;</div><div class="line">        data ---&gt;   这个是服务端写入的数据</div><div class="line">    &#125;)</div><div class="line">    socket.write(&apos;nihao&apos;)   ---&gt;这个是服务端可以写入数据</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>分配ip和端口 开启服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server.listen(3000,&apos;127.0.0.1&apos;,function()&#123;     ----&gt;这里的ip地址要写的</div><div class="line">    console.log(&apos;开启服务器&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h3><ol>
<li><p>引入模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var net = require(&apos;net&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>配置参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var client = net.createConnection(&#123;   ------&gt;client 实际上就是服务端的socket对象</div><div class="line">    port:3000,</div><div class="line">    host:&apos;127.0.0.1&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">client.on(&apos;connect&apos;,function()&#123;</div><div class="line">    //链接事件</div><div class="line">&#125;)</div><div class="line"></div><div class="line">client.on(&apos;data&apos;,function(data)&#123;</div><div class="line">    //服务器 向客户端发的数据</div><div class="line">&#125;)</div><div class="line">process.stdin.on(&apos;data&apos;,function(data)&#123;</div><div class="line">    client.write(data)  ------&gt;  通过进程的输入事件向 服务器发数据</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><ul>
<li>可以将聊天的内容  和  文件读取流结合起来  发送数据 ，当然这看起来并没什么用</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;stream流&quot;&gt;&lt;a href=&quot;#stream流&quot; class=&quot;headerlink&quot; title=&quot;stream流&quot;&gt;&lt;/a&gt;stream流&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;node可以用fs模块readFile和writeFile来完成读取和输出的任务&lt;/li&gt;
&lt;li&gt;但是不能操作大文件&lt;/li&gt;
&lt;li&gt;所以有了stream流来操作大文件&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;需要引入核心模块fs&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var fs = require(&amp;apos;fs&amp;apos;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>nodejs初始</title>
    <link href="http://yoursite.com/2017/02/25/nodejs%E5%88%9D%E5%A7%8B/"/>
    <id>http://yoursite.com/2017/02/25/nodejs初始/</id>
    <published>2017-02-25T13:25:04.240Z</published>
    <updated>2017-02-25T13:25:49.286Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nodejs初始"><a href="#nodejs初始" class="headerlink" title="nodejs初始"></a>nodejs初始</h3><ul>
<li>nodejs是什么<ul>
<li>它是一个用来解释和执行javascript的运行环境</li>
</ul>
</li>
<li>首先nodejs是用来干嘛的<ul>
<li>构建服务器</li>
<li>构建工具<a id="more"></a></li>
</ul>
</li>
<li>特点：<ul>
<li>事件驱动</li>
<li>非阻塞I/O流</li>
</ul>
</li>
<li>运行环境；<br>chrome v8引擎</li>
<li>它有一个自己的模块化<ul>
<li>commonjs 使用基本上和seajs相仿</li>
<li>代码同步执行</li>
<li>会缓存资源不会出现死循环调用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = require(&apos;./b&apos;)   =&gt;  另一个文件夹下面   var b = require(&apos;./a&apos;)</div><div class="line">   console.log(&quot;2&quot;)                                     console.log(&quot;1&quot;);</div><div class="line">//只会执行一次</div><div class="line">先打印1</div><div class="line">再打印2</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ul>
<li>global<ul>
<li>可以用来加载一些共用得到方法或者参数<h3 id="process进程"><a href="#process进程" class="headerlink" title="process进程"></a>process进程</h3></li>
</ul>
</li>
<li><p>process.argv  进程执行时的参数 是一个数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">process.argv.slice(2);  --&gt; slice用来截取数组</div></pre></td></tr></table></figure>
</li>
<li><p>process.stdout.write(‘hello world’);</p>
<ul>
<li>向外打印输出  相当于console.log<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">process.stdin.on(&apos;data&apos;,function(chunk)&#123;</div><div class="line">    console.log(chunck.toString())   ==&gt;是一个十六进制的数，需要转换为可现实的字符串</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="path处理文件路径"><a href="#path处理文件路径" class="headerlink" title="path处理文件路径"></a>path处理文件路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var path = require(&apos;path&apos;);</div><div class="line">path.jion(__dirname,&apos;name&apos;) =&gt; __filename;</div></pre></td></tr></table></figure>
<h3 id="引入querystring"><a href="#引入querystring" class="headerlink" title="引入querystring"></a>引入querystring</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var querystring = require(&apos;querystring&apos;);</div><div class="line">//把字符串转为对象</div><div class="line">var str = &apos;name=xiaoming&amp;age=18&apos;</div><div class="line">querystring.parse(str) =&gt; &#123;name:&quot;xiaoming&quot;,age:&quot;18&quot;&#125;;</div><div class="line">var  obj = &#123;name:&quot;xiaoming&quot;,age:&quot;18&quot;&#125;;</div><div class="line">querystring.stringify(obj)  =&gt; &apos;name=xiaoming&amp;age=18&apos;</div></pre></td></tr></table></figure>
<h3 id="引入fs-文件系统"><a href="#引入fs-文件系统" class="headerlink" title="引入fs  文件系统"></a>引入fs  文件系统</h3><ul>
<li><p>readFile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line">fs.readFile(&apos;./wenjian&apos;,[&apos;utf-8&apos;],function(err,data)&#123;</div><div class="line">    if(err) &#123;</div><div class="line">    throw err;</div><div class="line">    &#125;</div><div class="line">    console.log(data.toString());</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>writeFile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line">fs.writeFile(&apos;./a.txt&apos;,&apos;hellowrld&apos;,function(err)&#123;</div><div class="line">    if(err) throw err;</div><div class="line">    console.log(&apos;写入成功&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;nodejs初始&quot;&gt;&lt;a href=&quot;#nodejs初始&quot; class=&quot;headerlink&quot; title=&quot;nodejs初始&quot;&gt;&lt;/a&gt;nodejs初始&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;nodejs是什么&lt;ul&gt;
&lt;li&gt;它是一个用来解释和执行javascript的运行环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;首先nodejs是用来干嘛的&lt;ul&gt;
&lt;li&gt;构建服务器&lt;/li&gt;
&lt;li&gt;构建工具
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>seajs和requirejs的用法</title>
    <link href="http://yoursite.com/2017/02/23/seajs%E5%92%8Crequirejs/"/>
    <id>http://yoursite.com/2017/02/23/seajs和requirejs/</id>
    <published>2017-02-23T13:30:25.236Z</published>
    <updated>2017-02-23T13:31:30.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="seajs-requirejs"><a href="#seajs-requirejs" class="headerlink" title="seajs  requirejs"></a>seajs  requirejs</h2><ul>
<li>这个两个插件是用来做什么的？</li>
<li>怎么用？</li>
<li>有没有bug或者坑？</li>
<li>有没有更好的？<a id="more"></a>
<h3 id="seajs"><a href="#seajs" class="headerlink" title="seajs"></a>seajs</h3></li>
<li>这两个插件都是用来管理加载的 主要解决以下两个问题：</li>
</ul>
<ol>
<li>变量空间   通过封装来保证模块内的变量不会污染全局</li>
<li>减少页面引入的js链接的数量  便于管理</li>
</ol>
<ul>
<li>这两个软件都是用来做模块化的</li>
<li>模块化的好处<ul>
<li>提升开发效率</li>
<li>便于后期维护</li>
</ul>
</li>
<li>常见的模块规范 cmd amd commenjs ECMAscript</li>
</ul>
<h3 id="模块化变量方法"><a href="#模块化变量方法" class="headerlink" title="模块化变量方法"></a>模块化变量方法</h3><ul>
<li>全局变量</li>
<li>把变量绑定到一个对象身上</li>
<li>隔离公有私有变量</li>
</ul>
<h3 id="seajs-–-gt-cmd-模块-一个模块就是一个文件-define-require-exports-module"><a href="#seajs-–-gt-cmd-模块-一个模块就是一个文件-define-require-exports-module" class="headerlink" title="seajs  –&gt; cmd 模块 一个模块就是一个文件  define require exports module"></a>seajs  –&gt; cmd 模块 一个模块就是一个文件  define require exports module</h3><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">先在主页html中引入sea.js文件</div><div class="line">&lt;script src=&quot;sea.js&quot;&gt;&lt;/script&gt;</div><div class="line">在写一个主标签</div><div class="line">&lt;script&gt;</div><div class="line">    seajs.use(&apos;./main&apos;,function()&#123;</div><div class="line">        //加载后的回调函数</div><div class="line">    &#125;)</div><div class="line">    //也就是去调用主页面  这里路径要注意</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="这里路径要注意"><a href="#这里路径要注意" class="headerlink" title="这里路径要注意"></a>这里路径要注意</h3><ul>
<li>seajs的路径会默认是主路径  可以不加’.js’后缀</li>
</ul>
<h3 id="主js-main-js"><a href="#主js-main-js" class="headerlink" title="主js  main.js"></a>主js  main.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//基本上是一define开始定义一个模块</div><div class="line">define(function(require,exports,module)&#123;</div><div class="line">    //这里用require引入其他模块</div><div class="line">    var foo = require(&apos;下一级路径&apos;)    //路径相对与主 main.js开始  ---&gt;一般返回的是一个对象</div><div class="line">    //这里就可以操作foo在页面中出效果</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="下一级js"><a href="#下一级js" class="headerlink" title="下一级js"></a>下一级js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">define(function(require,exports,module)&#123;</div><div class="line">    function()&#123;&#125;</div><div class="line">    var a...</div><div class="line">    //所有的变量和方法需要别人用的都绑定到一个对象上最后返回出去</div><div class="line"></div><div class="line">    module.exports = &#123;</div><div class="line">        fn:fn,</div><div class="line">        a:a...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="requirejs用法"><a href="#requirejs用法" class="headerlink" title="requirejs用法"></a>requirejs用法</h3><ul>
<li>基本上和seajs类型 不过不同在于</li>
</ul>
<ol>
<li><p>它在页面上script中直接指定了主js  在页面上也就只有这一个  预加载 预解析</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script data-main=&quot;scripts/main.js&quot; src=&quot;scripts/require.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>所有主要编写main.js中的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">requirejs([&apos;jquery&apos;,&apos;canvas&apos;],function($,ca)&#123;   ---&gt;这里引入是一个模块对象</div><div class="line">                                                ---&gt;在模块中返回的是一个对象</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>模块写法   模块就是用来返回对象的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(function()&#123;</div><div class="line">    return &#123;</div><div class="line">    name:...</div><div class="line">    age:....</div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="二者的共同点"><a href="#二者的共同点" class="headerlink" title="二者的共同点"></a>二者的共同点</h3><ol>
<li>都可以配置路径<br>seajs.config({<br>path:’主路径’,<br>})</li>
<li>都是预加载  但是seajs是懒解析</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;seajs-requirejs&quot;&gt;&lt;a href=&quot;#seajs-requirejs&quot; class=&quot;headerlink&quot; title=&quot;seajs  requirejs&quot;&gt;&lt;/a&gt;seajs  requirejs&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这个两个插件是用来做什么的？&lt;/li&gt;
&lt;li&gt;怎么用？&lt;/li&gt;
&lt;li&gt;有没有bug或者坑？&lt;/li&gt;
&lt;li&gt;有没有更好的？
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="管理工具" scheme="http://yoursite.com/tags/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>angular路由小结</title>
    <link href="http://yoursite.com/2017/02/21/angular-route/"/>
    <id>http://yoursite.com/2017/02/21/angular-route/</id>
    <published>2017-02-21T14:54:34.874Z</published>
    <updated>2017-03-07T12:54:57.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="angular-路由"><a href="#angular-路由" class="headerlink" title="angular 路由"></a>angular 路由</h2><ul>
<li>angular路由是什么</li>
<li>使用方法</li>
</ul>
<h2 id="angular路由是用来模块化的"><a href="#angular路由是用来模块化的" class="headerlink" title="angular路由是用来模块化的"></a>angular路由是用来模块化的</h2><ul>
<li>首先angular是为单页面应用而生的一个框架</li>
<li>为了做到单页面应用，它采用里改变url中的锚点值来告诉页面我要改变了</li>
<li>为了不跳转页面，采用的是a标签的锚点 实际上改变的就是hash值</li>
<li>路由route就是用来监控 url的改变 拿到改变的值  去请求生成不同的页面数据 和创造不同的controller来渲染不同的页面<a id="more"></a>
</li>
</ul>
<h2 id="路由的使用"><a href="#路由的使用" class="headerlink" title="路由的使用"></a>路由的使用</h2><ol>
<li><p>首先需要引入第三方插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install angular-route --save</div></pre></td></tr></table></figure>
</li>
<li><p>引用页面之后利用config初始化$routeProvider 对象 用着个对象去管理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var app = angular.module(&apos;myapp&apos;,[ngRoute]) // 第三方插件的名字ngRoute</div><div class="line">    app.config(&apos;$routeProvider&apos;,function($routeProvider)&#123;</div><div class="line">        $routeProvider</div><div class="line">        .when(&apos;/:status?&apos;,&#123;          //这个status可以是固定的  也可以是一个占位符 controller的$routeParams 中可以掉出一个对象  这个对象=&#123;status:&apos;改变的hash值&apos;&#125;</div><div class="line">            template:&apos;&lt;p&gt;标签字符串&lt;/p&gt;&apos;,</div><div class="line">            templateUrl:&apos;一般是固定的&apos;,                     // 请求一个模板=另启一个html&gt;最后渲染到页面中含有ng-view 的innerHTML;</div><div class="line">            controller:&apos;mycontroller&apos;           //指定一个控制器</div><div class="line">        &#125;)</div><div class="line">        .otherwise(&#123;</div><div class="line">        redirectTo:&apos;when都没有时锚点的值&apos;         //只改变url并不会跳转</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>利用锚点值的改变 动态获取锚点值 让后去发送ajax请求</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">app.controller(&quot;mycontroller&quot;,[&apos;$scope&apos;,&apos;$http&apos;,&apos;$routeParams&apos;,&apos;$route&apos;],function($scope,$http,$routeParams,$route)&#123;</div><div class="line">    //先渲染页面  然后在发送ajax请求 这里把页面都分号了  所以就只写ajax请求来渲染页面了</div><div class="line">    $http.get(&apos;地址：相对与html&apos;)      //get方法</div><div class="line">    .then(                             //then方法  地址</div><div class="line">    fn(data)&#123;成功的回调函数</div><div class="line">        //data  是一个被封装的对象  真正得到数据是  data.data</div><div class="line">        $scope.data = data.data    //通过这个方式 把数据暴露在controller中</div><div class="line">    &#125;,</div><div class="line">    fn(data)&#123;失败的回调函数&#125;</div><div class="line">    )</div><div class="line"></div><div class="line">    //jsonp请求</div><div class="line">    $http.jsonp(&apos;http://****?callback=JSON_CALLBACK&apos;)     //这里的callback=JSON_CALLBACK固定</div><div class="line">    .then(                             //then方法  地址</div><div class="line">    fn()&#123;成功的回调函数</div><div class="line">        //data  是一个被封装的对象  真正得到数据是  data.data</div><div class="line">        $scope.data = data.data    //通过这个方式 把数据暴露在controller中</div><div class="line">        &#125;,</div><div class="line">    fn()&#123;失败的回调函数&#125;</div><div class="line">    )</div><div class="line"></div><div class="line"></div><div class="line">    //当锚点值没有找到得到时候 可以重新设置 锚点值 到一个特定的地方</div><div class="line">    if($routeParams.status) &#123;</div><div class="line">        $route.updataParams = &apos;/要去的锚点&apos;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;angular-路由&quot;&gt;&lt;a href=&quot;#angular-路由&quot; class=&quot;headerlink&quot; title=&quot;angular 路由&quot;&gt;&lt;/a&gt;angular 路由&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;angular路由是什么&lt;/li&gt;
&lt;li&gt;使用方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;angular路由是用来模块化的&quot;&gt;&lt;a href=&quot;#angular路由是用来模块化的&quot; class=&quot;headerlink&quot; title=&quot;angular路由是用来模块化的&quot;&gt;&lt;/a&gt;angular路由是用来模块化的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先angular是为单页面应用而生的一个框架&lt;/li&gt;
&lt;li&gt;为了做到单页面应用，它采用里改变url中的锚点值来告诉页面我要改变了&lt;/li&gt;
&lt;li&gt;为了不跳转页面，采用的是a标签的锚点 实际上改变的就是hash值&lt;/li&gt;
&lt;li&gt;路由route就是用来监控 url的改变 拿到改变的值  去请求生成不同的页面数据 和创造不同的controller来渲染不同的页面
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>angular初始</title>
    <link href="http://yoursite.com/2017/02/19/agl/"/>
    <id>http://yoursite.com/2017/02/19/agl/</id>
    <published>2017-02-19T13:43:56.987Z</published>
    <updated>2017-02-19T14:08:19.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="angular学习笔记"><a href="#angular学习笔记" class="headerlink" title="angular学习笔记"></a>angular学习笔记</h2><h3 id="angular是一个框架"><a href="#angular是一个框架" class="headerlink" title="angular是一个框架"></a>angular是一个框架</h3><ul>
<li>什么是框架？</li>
<li>和jquery有什么区别？</li>
<li>为什么要学习这个框架？</li>
<li>这个框架有哪些优点和缺点？</li>
<li>有哪些网站使用到了angular?<a id="more"></a>
</li>
</ul>
<h2 id="angular-是一个MV-类型的框架"><a href="#angular-是一个MV-类型的框架" class="headerlink" title="angular 是一个MV*类型的框架"></a>angular 是一个MV*类型的框架</h2><ul>
<li>特点是数据双向绑定 和依赖注入</li>
</ul>
<h3 id="angular的使用"><a href="#angular的使用" class="headerlink" title="angular的使用"></a>angular的使用</h3><ol>
<li><p>首先是npm下包 之后引入到项目中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm init -y</div><div class="line">npm install angular --save</div><div class="line">&lt; script=angular的路径 &gt;</div></pre></td></tr></table></figure>
</li>
<li><p>angular使用基本方法<br>（1）用angular创建一模块<br>（2）模块挂在一个控制器<br>（3）控制器中添加数据模型 中的变量和方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var app = angular.module(&quot;myApp&quot;,[]);   //这里的[]数组可以引入其他第三方的模块</div><div class="line">    app.controller(&quot;myController&quot;,[&apos;$scope&apos;,function($scope)&#123;</div><div class="line">        $scope.name = &quot;小明&quot;;  //这里基本上等于初始化了；</div><div class="line">        $scope.fn = function()&#123;&#125;;</div><div class="line">    &#125;]);</div></pre></td></tr></table></figure>
</li>
<li><p>angular指令和表达式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng-model --&gt; 指令    &#123;&#123;name&#125;&#125; --&gt; 表达式</div></pre></td></tr></table></figure>
</li>
<li><p>ng指令的API</p>
</li>
</ol>
<ul>
<li>ng-model –&gt; 跟input中的数据挂钩</li>
<li>ng-bind  –&gt; 跟双标签的内容联系 并且不会出现闪烁的问题</li>
<li>ng-bind-html –&gt; 需要引入第三方插件sanitize将标签内容转为字符串</li>
<li>ng-click –&gt; 点击触发函数 可以传入$event事件对象<br>ng-click = fn($event);</li>
<li>ng-repeat = “item in data track by $index “–&gt;  循环当前的标签  并且按照$scope中$index的值0,1,2,3,4…</li>
</ul>
<h2 id="流行框架第三天"><a href="#流行框架第三天" class="headerlink" title="流行框架第三天"></a>流行框架第三天</h2><h3 id="复习指令"><a href="#复习指令" class="headerlink" title="复习指令"></a>复习指令</h3><ol>
<li>ng-app:是程序入口，宣告angular的管理范围</li>
<li>ng-click:注册一个点击事件</li>
<li>ng-model:双向数据绑定</li>
<li>ng-init:初始化数据模型</li>
<li>ng-controller:指定我们使用哪一个控制器</li>
<li>ng-bind:也是用来绑定数据模型的值，注意必须在双标签中使用</li>
<li>ng-cloak:利用了angular会移除掉样式名为ng-cloak的样式的特性</li>
<li>ng-bind-html:就是用来安全渲染我们的html，注意必须和ngSanitize连用</li>
<li>ng-repeat:用来渲染数据列表（数组/对象）中的数据，ng- repeat=”item in data track by $index”</li>
<li><p>ng-class:操作样式，一种是在多种样式中选择一种样式<br>ng-class=”{‘A’:’red’,’B’:’blue’,’C’:’green’}[item.salary]”<br>还有一种是在多种样式中选择多种样式<br>“{‘red’:false,’fontColor’:true,’green’:true}”</p>
</li>
<li><p>ng-hide/ng-show:隐藏或者显示我们的元素，这对指令是利用display:none</p>
</li>
<li>ng-if/ng-switch ng-switch-when</li>
</ol>
<h3 id="angular第五天"><a href="#angular第五天" class="headerlink" title="angular第五天"></a>angular第五天</h3><h3 id="自定义指令简单介绍及使用"><a href="#自定义指令简单介绍及使用" class="headerlink" title="自定义指令简单介绍及使用"></a>自定义指令简单介绍及使用</h3><ul>
<li>自定义指令无外乎增强了HTML,提供了额外的功能。</li>
<li>内部指令基本能满足我们的需求。</li>
<li><p>少数情况下我们有一些特殊的需要，可以通过自定义指令的方式实现：</p>
</li>
<li><p>通过 模块对象的directive方法创建</p>
<ul>
<li>有两个参数，第一个参数，是指令的名字：必须是驼峰命名法命名<pre><code>第二个参数和控制器的第二个参数一样,在第二个参数的function里直接返回的一个obj对象
</code></pre></li>
<li>使用时：需要将指令的名字转成小写，并以-分割原先在大小写字母<h3 id="自定义指令中回函数里返回的对象的属性"><a href="#自定义指令中回函数里返回的对象的属性" class="headerlink" title="自定义指令中回函数里返回的对象的属性"></a>自定义指令中回函数里返回的对象的属性</h3></li>
</ul>
</li>
<li>template:需要一个字符串，最终这个字符串值被被添加到自定义指令所在标签的innerHTML位置</li>
<li><p>templateUrl:需要一个字符串，这个字符串是一个文本文件的路径,anuglar最终会异步请求这个文件，把拿到的内容插入到自定义指令所在的标签的innerHTML位置,<br>该字符串也可以是script标签的id值，把script标签中的内容当作模板字符串来使用<br>注意：script的type属性需要为”text/ng-template”</p>
</li>
<li><p>restrict:也是需要一个字符，可以是A,E,C,M 这4个字符中任何一个，也可以任意的组合，A:以属性的形式使用，E:以自定义标签的形式使用，C:表示以类样式名的形式使用，M:以注释的形式使用</p>
</li>
<li><p>replace: 需要一个布尔值，为true,会将自定义指令所在的标签替换为模板字符串。</p>
</li>
<li><p>transclude:转置，是需要一个布尔值，为true时会把自定义指令所在标签的innerHTML值添加到模板字符串中，需要与ng-transclude指令配合使用，ng-transclude指令需要将值插入到哪个元素的innerHTML位置.不能与replace指令同用。</p>
</li>
<li><p>scope:需要一个对象，可以获取到自定义指令所在标签的属性值：<br> {</p>
<pre><code>属性名:&apos;@test&apos;, 属性值需要以@开头,@后面是自定义指令所在标签的属性名，最终在模板字符串中通过表达式可以使用scope的属性名可以直接输出

test:&apos;@&apos;// 是简写方式
</code></pre><p> }</p>
</li>
<li>link:指向一个function，这个function有三个参数：<ul>
<li>scope: 类似于控制器中的$scope,也可以暴露一些值。</li>
<li>element:这是一个jqLite对象，是自定义指令所在标签的jqLite对象</li>
<li>attributes:是自定义指令所在标签的所以属性的集合.</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">body ng-app = &quot;myApp&quot;</div><div class="line">        &lt;div my-order&gt;</div><div class="line">                这是原来的内容</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/ng-template&quot; id=&quot;tem&quot;&gt;</div><div class="line">        &lt;div ng-transclude&gt;</div><div class="line">            这是script创建的div</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">            这个是创建的 没加ng-transclude</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//创建模块</div><div class="line">    var app = angular.module(&quot;myApp&quot;,[]);//--&gt;这里可以传入第三方插件</div><div class="line">        //自定义指令</div><div class="line"></div><div class="line">        app.directive(&apos;myOrder&apos;,function()&#123;          // --&gt;自定义指令第二个参数是函数并且返回一个对象，这个对象包含了模板等信息，命名规则是驼峰命名  在html标签中自动转为小写为my-app;</div><div class="line">            return &#123;</div><div class="line">                //template:&apos;&lt;div&gt;这是一个div&lt;/div&gt;&apos;,    //template --&gt; 可以是字符串拼接成</div><div class="line">                //templateUrl:&apos;./view.html&apos;           //templateUrl --&gt; 可以是相当于与发送ajax请求</div><div class="line">                templateUrl:&quot;tem&quot;,               //templateUrl --&gt;也可以是由stcript创建的模板 主模块一定要子啊body里</div><div class="line">                restrict:&quot;AEMC&quot;,    //A--&gt;attribute Eelement M--&gt;注释 C--&gt;class</div><div class="line">                link:function(scope,element,attr) &#123;</div><div class="line">                    //这里可以直接用创建出来的元素使用</div><div class="line">                &#125;,</div><div class="line">                transclude:true</div><div class="line">                //replace:true   //--&gt;这个会替换注释中的内用</div><div class="line"></div><div class="line">            &#125;;</div><div class="line">        &#125;)</div></pre></td></tr></table></figure>
<h2 id="todomvc案例"><a href="#todomvc案例" class="headerlink" title="todomvc案例"></a>todomvc案例</h2><h3 id="todomvc-简单介绍"><a href="#todomvc-简单介绍" class="headerlink" title="todomvc 简单介绍"></a>todomvc 简单介绍</h3><h3 id="todomvc-功能分析"><a href="#todomvc-功能分析" class="headerlink" title="todomvc 功能分析"></a>todomvc 功能分析</h3><ol>
<li>显示数据列表</li>
<li><p>添加任务</p>
</li>
<li><p>删除任务</p>
<ul>
<li>使用了数组的splice</li>
</ul>
</li>
<li><p>修改任务</p>
</li>
</ol>
<ul>
<li>只是改变页面是否可以编辑的一个状态</li>
</ul>
<ol>
<li><p>切换是任务是否完成的状态</p>
</li>
<li><p>批量的切换任务是否完成的状态</p>
<ul>
<li>使用了ng-change事件</li>
</ul>
</li>
<li><p>清除已完成任务</p>
</li>
</ol>
<ul>
<li>尽量不要在循环中添加或删除数组元素。</li>
</ul>
<ol>
<li><p>1 控制清除已完成任务按钮的显示与否</p>
</li>
<li><p>显示未完成的任务数</p>
</li>
</ol>
<ul>
<li>是给ng-bind指定一个方法,方法最终会返回一个具体的值,</li>
<li>ng-bind 会把这个值渲染到页面。</li>
</ul>
<ol>
<li>切换不同状态任务的显示与否</li>
</ol>
<h2 id="过滤器-filter"><a href="#过滤器-filter" class="headerlink" title="过滤器(filter)"></a>过滤器(filter)</h2><h3 id="格式化数据的过滤器"><a href="#格式化数据的过滤器" class="headerlink" title="格式化数据的过滤器"></a>格式化数据的过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">-  currency 将数字转成货币的形式显示</div><div class="line">&gt;&lt;!-- 语法在数据模型后面加上 |currency</div><div class="line">        参数，通过冒号:的方式传递--&gt;</div><div class="line">    &lt;p&gt;&#123;&#123;money | currency :&apos;￥&apos; &#125;&#125;&lt;/p&gt;</div><div class="line"></div><div class="line">-  date 将整数形式的日期转换为用户能够识别的形式;</div><div class="line">&gt;&lt;!-- 语法在数据模型后面加上 |currency</div><div class="line">        参数，通过冒号:的方式传递--&gt;</div><div class="line">    &lt;p&gt;&#123;&#123;money | currency :&apos;￥&apos; &#125;&#125;&lt;/p&gt;</div><div class="line"></div><div class="line">-  limitTo 是控制字符串显示的长度</div><div class="line">    + 有两个参数，第一个表示需要显示长度</div><div class="line">                第二个表示从哪个索引开始显示</div><div class="line"></div><div class="line">-  orderBy,需要一个字符串作为参数：这个字符就是数组中元素的一个属性名</div><div class="line">    ,默认是按升序排列的，如果给这个字符前加上一个-号表示降序排列.</div><div class="line"></div><div class="line">-  json</div><div class="line"></div><div class="line">-  在js中使用过滤器的方式</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">javascript</div><div class="line">    // $filter其实是个方法</div><div class="line">           // 第一个参数:就是过滤器的名字</div><div class="line">           // 会返回一个方法</div><div class="line">           //               + 至少有一个参数(就是使用到的数据)</div><div class="line">           //               + 其他的参数依次是过滤器所使用到的参数</div><div class="line">           var tmp = $filter(&apos;date&apos;)($scope.myDate,&apos;yyyy年MM月-dd日 HH:mm:ss&apos;)</div><div class="line">           $scope.tmp=tmp;</div></pre></td></tr></table></figure>
<ul>
<li>1234588910120</li>
<li>1234567891011</li>
</ul>
<h3 id="过滤数据的过滤器"><a href="#过滤数据的过滤器" class="headerlink" title="过滤数据的过滤器"></a>过滤数据的过滤器</h3><ul>
<li>filter</li>
<li>一般是与ng-repeat指令共同使用</li>
<li>参数：可以是一个普通类型-angular会对这样的参数进行全局匹配;<pre><code>也可以是一个object对象-angular就会根据对象中的属性及属性值去数据中的每一个元素中寻找相应的属性，当前属性值相等的时候数据就会被显示。
</code></pre></li>
</ul>
<p>filter过滤器 –&gt; service服务 –&gt; 路由ngRoute<br>–&gt; ng-repeat=”item in arr | filter: {isCompleted:true,false,undefined,true,false}”<br>–&gt; $scope.location = $location $watch只能监视$scope里面的模型数据 –&gt;  $scope.$watch(‘location.url()’)监视我们的hash<br>–&gt; 把控制器提出来 –&gt; 把一些涉及到数据相关的东西放到service服务里面(angular只能做到双向数据绑定，不负责让localStorage里面的数据自动更新 –&gt; $watch监视tasks的变量 –&gt; Todos.save() )<br>–&gt; ngRoute<br>    –&gt; $routeProvider<br>    –&gt; $routeParams<br>    –&gt; $route.updateParams</p>
<ol>
<li>第一天课程下载<br><a href="https://github.com/black-pony/angular_day01" target="_blank" rel="external">通过git下载</a><br><a href="https://www.npmjs.com/package/angular-day01" target="_blank" rel="external">通过npm下载</a></li>
<li>第二天课程下载<br><a href="https://github.com/black-pony/angular-day02" target="_blank" rel="external">通过git下载</a><br><a href="https://www.npmjs.com/package/angular-day02" target="_blank" rel="external">通过npm下载</a></li>
<li>第三天课程下载<br><a href="https://github.com/black-pony/angular-day03" target="_blank" rel="external">通过git下载</a><br><a href="https://www.npmjs.com/package/angular-day03" target="_blank" rel="external">通过npm下载</a></li>
<li>第四、五天课程下载<br><a href="https://github.com/black-pony/angular-day04-05" target="_blank" rel="external">通过git下载</a><br><a href="https://www.npmjs.com/package/angular-day04-day-5" target="_blank" rel="external">通过npm下载</a></li>
</ol>
<p>angular 是一个MVVM/MVC框架<br>我们是通过改变数据模型 就可以同步的改变视图中的数据的项数</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;angular学习笔记&quot;&gt;&lt;a href=&quot;#angular学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angular学习笔记&quot;&gt;&lt;/a&gt;angular学习笔记&lt;/h2&gt;&lt;h3 id=&quot;angular是一个框架&quot;&gt;&lt;a href=&quot;#angular是一个框架&quot; class=&quot;headerlink&quot; title=&quot;angular是一个框架&quot;&gt;&lt;/a&gt;angular是一个框架&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;什么是框架？&lt;/li&gt;
&lt;li&gt;和jquery有什么区别？&lt;/li&gt;
&lt;li&gt;为什么要学习这个框架？&lt;/li&gt;
&lt;li&gt;这个框架有哪些优点和缺点？&lt;/li&gt;
&lt;li&gt;有哪些网站使用到了angular?
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>新建hexo个博客</title>
    <link href="http://yoursite.com/2017/02/18/markuphexo/"/>
    <id>http://yoursite.com/2017/02/18/markuphexo/</id>
    <published>2017-02-18T12:30:18.401Z</published>
    <updated>2017-02-22T00:29:03.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何搭建自己的hexo博客"><a href="#如何搭建自己的hexo博客" class="headerlink" title="如何搭建自己的hexo博客"></a>如何搭建自己的hexo博客</h2><p>分为两步：1.先在本地生成 2.上传到github服务器 生成静态博客</p>
<ol>
<li>首先得安装好npm<a id="more"></a></li>
<li><p>用npm安装hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure>
</li>
<li><p>选择你要新建博客的文件夹 初始化hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init .   //.代表全部</div></pre></td></tr></table></figure>
</li>
<li><p>去网上下载主题，也可以使用自带的<br>怎么下载主题？<br><a href="https://hexo.io/" target="_blank" rel="external">hexo官网</a></p>
<ul>
<li>挑选好看的主题</li>
</ul>
<ul>
<li>点击blog进入博主的github主页 找项目它的项目文件</li>
</ul>
<ul>
<li>clone到本地进行配置文件</li>
</ul>
</li>
<li><p>文件配置<br>根据博主的readme进行配置，每个可能都不一样</p>
<ul>
<li>主文件夹是自己的.yml  里面有各种设置</li>
<li>source资源文件夹中有样式和需要上传的markdown文件</li>
</ul>
</li>
<li><p>hexo使用主题的原理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>hexo执行代码hexo server –&gt;利用你blog中的souce资源 和 theme中的样式资源 根据配置单的要求<br>生成相应的html代码在public中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="github如何搭建博客"><a href="#github如何搭建博客" class="headerlink" title="github如何搭建博客"></a>github如何搭建博客</h3><ol>
<li><p>首先新建一个仓库 为了能方便的调用blog这个仓库有一个默认的名字<br>用户名.github.io</p>
</li>
<li><p>将生成的静态页面上传到这个仓库中就可以使用<br>用户名.github.io 进行访问</p>
</li>
<li><p>markdown的小技巧 预览代码<br>在markdown中插入 &lt;iframe&gt;标签<br>在利用htmlpreview.github.io中的方法可以 在markdown中预览</p>
</li>
<li>githup htmlpreview预览<br>为了使能调用js 需要在项目中开启分支<ul>
<li>setting</li>
<li>options</li>
<li>source</li>
<li>开启一个分支 save</li>
<li>你将得到一个url <a href="https://用户名.githup.io/仓库名/这里写你要预览的文件" target="_blank" rel="external">https://用户名.githup.io/仓库名/这里写你要预览的文件</a></li>
<li>挑转到预览页面</li>
</ul>
</li>
</ol>
<h5 id="跳转链接"><a href="#跳转链接" class="headerlink" title="跳转链接"></a>跳转链接</h5><p>  <a href="http://htmlpreview.github.io/" target="_blank" rel="external">htmlpreview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何搭建自己的hexo博客&quot;&gt;&lt;a href=&quot;#如何搭建自己的hexo博客&quot; class=&quot;headerlink&quot; title=&quot;如何搭建自己的hexo博客&quot;&gt;&lt;/a&gt;如何搭建自己的hexo博客&lt;/h2&gt;&lt;p&gt;分为两步：1.先在本地生成 2.上传到github服务器 生成静态博客&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先得安装好npm
    
    </summary>
    
      <category term="插件" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="杂文" scheme="http://yoursite.com/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>canvas绘制星空z轴</title>
    <link href="http://yoursite.com/2017/02/18/start/"/>
    <id>http://yoursite.com/2017/02/18/start/</id>
    <published>2017-02-18T11:22:00.623Z</published>
    <updated>2017-02-18T11:25:22.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="星空demo"><a href="#星空demo" class="headerlink" title="星空demo"></a>星空demo</h1><ul>
<li>主要用到了canvas</li>
<li>x,y,z轴</li>
</ul>
<iframe width="100%" scrolling="no" height="400px" frameborder="0" src="https://461255824.github.io/demo/canvasstar.html"></iframe>

<h3 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h3><p>请转到我的主页<a href="https://github.com/461255824/demo/blob/master/canvasweiba.html" target="_blank" rel="external">guihub</a><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;星空demo&quot;&gt;&lt;a href=&quot;#星空demo&quot; class=&quot;headerlink&quot; title=&quot;星空demo&quot;&gt;&lt;/a&gt;星空demo&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;主要用到了canvas&lt;/li&gt;
&lt;li&gt;x,y,z轴&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width=&quot;100%&quot; scrolling=&quot;no&quot; height=&quot;400px&quot; frameborder= &quot;0&quot; src=&quot;https://461255824.github.io/demo/canvasstar.html&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;详细代码&quot;&gt;&lt;a href=&quot;#详细代码&quot; class=&quot;headerlink&quot; title=&quot;详细代码&quot;&gt;&lt;/a&gt;详细代码&lt;/h3&gt;&lt;p&gt;请转到我的主页&lt;a href=&quot;https://github.com/461255824/demo/blob/master/canvasweiba.html&quot;&gt;guihub&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="demo" scheme="http://yoursite.com/categories/demo/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>gulp操作</title>
    <link href="http://yoursite.com/2017/02/18/gulp%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/02/18/gulp操作/</id>
    <published>2017-02-18T06:54:39.349Z</published>
    <updated>2017-02-19T14:11:49.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gulp操作"><a href="#gulp操作" class="headerlink" title="gulp操作"></a>gulp操作</h2><h3 id="gulp是用来压缩合并代码的"><a href="#gulp是用来压缩合并代码的" class="headerlink" title="gulp是用来压缩合并代码的"></a>gulp是用来压缩合并代码的</h3><p>1.npm 全局安装gulp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-cli -g</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>2.找到要压缩代码的文件夹</p>
<p>（1）首先初始化npm工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init -y</div></pre></td></tr></table></figure></p>
<p>会生成一个package.json的安装文件<br>（2）安装gulp文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp --save--dev</div></pre></td></tr></table></figure></p>
<p>–save<br>表示要将文件存到dependencies 项目使用依赖的插件<br>–save–dev<br>表示要将文件存到devDependencies 开发时依赖的插件</p>
<h3 id="文件使用gulp压缩时需要的其他插件"><a href="#文件使用gulp压缩时需要的其他插件" class="headerlink" title="文件使用gulp压缩时需要的其他插件"></a>文件使用gulp压缩时需要的其他插件</h3><p>1.html压缩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-htmlmin --save--dev</div></pre></td></tr></table></figure></p>
<p>2.css压缩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-cssnano --save--dev</div></pre></td></tr></table></figure></p>
<p>3.js压缩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-uglify --save--dev</div></pre></td></tr></table></figure></p>
<p>4.文件合并<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-concat --save--dev</div></pre></td></tr></table></figure></p>
<p>###gulp执行需要的js代码<br>1.新建gulpfile.js 代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//js引入gulp对象</div><div class="line">var gulp = require(&quot;gulp&quot;);</div><div class="line">*注：引入的对象要加引号；</div><div class="line">//引入其他需要的插件对象</div><div class="line">var htmlmin = require(&quot;gulp-htmlmin&quot;);</div><div class="line">var cssnano = require(&quot;gulp-cssnano&quot;);</div><div class="line">var uglify = require(&quot;gulp-uglify&quot;);</div><div class="line">var concat = require(&quot;gulp-concat&quot;);</div><div class="line">var rename = rqurie(&quot;gulp-rename&quot;);//rename是一个插件</div></pre></td></tr></table></figure></p>
<p>2.执行任务代码</p>
<ul>
<li>gulp通过执行任务进行操作 任务顺序：gulp.task –&gt; gulp.src–&gt; gulp.dest –&gt;gulp.watch<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//新建一个task任务压缩js代码</div><div class="line">gulp.task(&quot;任务名&quot;,function()&#123;</div><div class="line">    gulp.src([&quot;需要压缩的文件相对路径&quot;])//如果是多个使用数组</div><div class="line">    .pipe(uglify())//gulp是通过管道pipe进行流通的</div><div class="line">    .pipe(rename(&apos;新的名字&apos;))//重命名一般是    名字.min.js</div><div class="line">    .pipe(gulp.dest(&quot;压缩后文件要存的位置&quot;))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>3.合并两及多个文件concat();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(&quot;合并任务&quot;,function()&#123;</div><div class="line">    gulp.src([&apos;文件路径文件1&apos;,&apos;文件2&apos;])</div><div class="line">    .pipe(concat(&apos;生成的文件路径及名称&apos;))</div><div class="line">    .pipe(gulp.dest(&quot;压缩后文件要存的位置&quot;))</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>4.压缩html文件<br>html文件中肯能含有css和js所以是应该是判读最多的 需要传入参数对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;htmlmin&apos;, function () &#123;</div><div class="line">//如果需要去除多个参数 可以先声明变量 便于整洁</div><div class="line">    var options = &#123;</div><div class="line">        removeComments: true,//清除HTML注释</div><div class="line">        collapseWhitespace: true,//压缩HTML</div><div class="line">        collapseBooleanAttributes: true,//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</div><div class="line">        removeEmptyAttributes: true,//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</div><div class="line">        removeScriptTypeAttributes: true,//删除&lt;script&gt;的type=&quot;text/javascript&quot;</div><div class="line">        removeStyleLinkTypeAttributes: true,//删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</div><div class="line">        minifyJS: true,//压缩页面JS</div><div class="line">        minifyCSS: true//压缩页面CSS</div><div class="line">    &#125;;</div><div class="line">    gulp.src(&apos;src/html/*.html&apos;)   //找到文件下所有以.html结尾的文件</div><div class="line">        .pipe(htmlmin(options))</div><div class="line">        .pipe(gulp.dest(&apos;dist/html&apos;));  //默认压缩后的文件都放到dist文件下</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>5.wactch任务可以配合browser-sync一起使用</p>
<ul>
<li>就是当监视下文件发生改变的时候 browser也进行显示已保证压缩的文件没有问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//全局安装borowsync</div><div class="line">npm install browser-sync -g</div><div class="line"></div><div class="line">//启动browser服务</div><div class="line">browsync start --server --files &quot;文件相对路径&quot;;</div><div class="line">注：browsync启动的当前目录一定要含有index.html文件 要不然启动不了</div></pre></td></tr></table></figure>
</li>
</ul>
<p>browser-sync和wacth没有必然的练习<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.task(&quot;mywacht&quot;,function()&#123;</div><div class="line">    gulp.watch([&apos;文件名1&apos;,&apos;文件名2&apos;],[&apos;任务名1&apos;,&apos;任务名2&apos;]);</div><div class="line">&#125;)</div><div class="line">//当文件名1或者2的内容改变的时候执行任务1,2；</div></pre></td></tr></table></figure></p>
<p>6.利用gulp合并图片成雪碧图<br>原理：是将css文件中用到的图片合并成一张，并改变css文件中图片的引入路径<br>(1)安装插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-spriter --save--dev</div></pre></td></tr></table></figure></p>
<p>(2)js代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//引入对象</div><div class="line">var spriter = gulp.require(&quot;gulp-spriter&quot;);</div><div class="line">//新建任务代码</div><div class="line">gulp.task(&quot;spriter&quot;,function()&#123;</div><div class="line">    gulp.src(&quot;文件名.css&quot;)</div><div class="line">    .pipe(spriter(&#123;</div><div class="line">        spriter:&apos;合并后的图片名.png&apos;,</div><div class="line">        slice:&apos;./原来的图片所在的文件夹&apos;,</div><div class="line">        outpath:&apos;合并后图片保存的文件夹&apos;</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(&quot;css文件保存的路径&quot;))</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul>
<li><p>API:<br>task (创建任务)<br>src (选择路径)<br>dest (输出路径)<br>watch (监视文件及执行任务)<br>rename (重命名文件)<br>require (引入插件对象)<br>pipe (管道)</p>
</li>
<li><p>插件：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>常用插件</th>
<th style="text-align:right">不常用插件</th>
</tr>
</thead>
<tbody>
<tr>
<td>uglify (压缩js)</td>
<td style="text-align:right">imgmin</td>
</tr>
<tr>
<td>concat (合并文件)</td>
<td style="text-align:right">jshint</td>
</tr>
<tr>
<td>cssnano (压缩css)</td>
<td style="text-align:right">eslint</td>
</tr>
<tr>
<td>htmlmin (压缩html)</td>
<td style="text-align:right">sourcemap</td>
</tr>
<tr>
<td>spriter (合并雪碧图)</td>
<td style="text-align:right">gulp-less</td>
</tr>
<tr>
<td>gulp-rename(重命名)</td>
<td style="text-align:right">gulp-if</td>
</tr>
<tr>
<td></td>
<td style="text-align:right">gulp-jsonminify</td>
</tr>
<tr>
<td></td>
<td style="text-align:right">gulp-load-plugins</td>
</tr>
<tr>
<td></td>
<td style="text-align:right">gulp-eslint</td>
</tr>
</tbody>
</table>
<p>注：跳转<a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文官网</a>;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;gulp操作&quot;&gt;&lt;a href=&quot;#gulp操作&quot; class=&quot;headerlink&quot; title=&quot;gulp操作&quot;&gt;&lt;/a&gt;gulp操作&lt;/h2&gt;&lt;h3 id=&quot;gulp是用来压缩合并代码的&quot;&gt;&lt;a href=&quot;#gulp是用来压缩合并代码的&quot; class=&quot;headerlink&quot; title=&quot;gulp是用来压缩合并代码的&quot;&gt;&lt;/a&gt;gulp是用来压缩合并代码的&lt;/h3&gt;&lt;p&gt;1.npm 全局安装gulp&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install gulp-cli -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="插件" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>引言</title>
    <link href="http://yoursite.com/2017/02/18/ReadMe/"/>
    <id>http://yoursite.com/2017/02/18/ReadMe/</id>
    <published>2017-02-18T04:46:25.000Z</published>
    <updated>2017-02-18T08:58:57.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>路漫漫其修远兮，吾将上下而求索<br>这里的笔记用于记录学习中的心得<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;路漫漫其修远兮，吾将上下而求索&lt;br&gt;这里的笔记用于记录学习中的心得&lt;br&gt;
    
    </summary>
    
      <category term="引言：" scheme="http://yoursite.com/categories/%E5%BC%95%E8%A8%80%EF%BC%9A/"/>
    
    
      <category term="引言" scheme="http://yoursite.com/tags/%E5%BC%95%E8%A8%80/"/>
    
  </entry>
  
</feed>
